// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// fastCorr
arma::sp_mat fastCorr(const arma::sp_mat& m, int ncores, bool verbose, bool full, bool diag, bool dist);
RcppExport SEXP _sparseDist_fastCorr(SEXP mSEXP, SEXP ncoresSEXP, SEXP verboseSEXP, SEXP fullSEXP, SEXP diagSEXP, SEXP distSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type ncores(ncoresSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< bool >::type full(fullSEXP);
    Rcpp::traits::input_parameter< bool >::type diag(diagSEXP);
    Rcpp::traits::input_parameter< bool >::type dist(distSEXP);
    rcpp_result_gen = Rcpp::wrap(fastCorr(m, ncores, verbose, full, diag, dist));
    return rcpp_result_gen;
END_RCPP
}
// fastCorr2
arma::sp_mat fastCorr2(const arma::sp_mat& m, const arma::mat& m2, int ncores, bool verbose, bool dist);
RcppExport SEXP _sparseDist_fastCorr2(SEXP mSEXP, SEXP m2SEXP, SEXP ncoresSEXP, SEXP verboseSEXP, SEXP distSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type m(mSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type m2(m2SEXP);
    Rcpp::traits::input_parameter< int >::type ncores(ncoresSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< bool >::type dist(distSEXP);
    rcpp_result_gen = Rcpp::wrap(fastCorr2(m, m2, ncores, verbose, dist));
    return rcpp_result_gen;
END_RCPP
}
// fastCov
arma::sp_mat fastCov(const arma::sp_mat& m, int ncores, bool verbose, bool full, bool diag, bool dist);
RcppExport SEXP _sparseDist_fastCov(SEXP mSEXP, SEXP ncoresSEXP, SEXP verboseSEXP, SEXP fullSEXP, SEXP diagSEXP, SEXP distSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type ncores(ncoresSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< bool >::type full(fullSEXP);
    Rcpp::traits::input_parameter< bool >::type diag(diagSEXP);
    Rcpp::traits::input_parameter< bool >::type dist(distSEXP);
    rcpp_result_gen = Rcpp::wrap(fastCov(m, ncores, verbose, full, diag, dist));
    return rcpp_result_gen;
END_RCPP
}
// fastCov2
arma::sp_mat fastCov2(const arma::sp_mat& m, const arma::mat& m2, int ncores, bool verbose);
RcppExport SEXP _sparseDist_fastCov2(SEXP mSEXP, SEXP m2SEXP, SEXP ncoresSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type m(mSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type m2(m2SEXP);
    Rcpp::traits::input_parameter< int >::type ncores(ncoresSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(fastCov2(m, m2, ncores, verbose));
    return rcpp_result_gen;
END_RCPP
}
// fastJacc2
arma::sp_mat fastJacc2(const arma::sp_mat& m, const arma::sp_mat& m2, int ncores, bool verbose, bool dist);
RcppExport SEXP _sparseDist_fastJacc2(SEXP mSEXP, SEXP m2SEXP, SEXP ncoresSEXP, SEXP verboseSEXP, SEXP distSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type m(mSEXP);
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type m2(m2SEXP);
    Rcpp::traits::input_parameter< int >::type ncores(ncoresSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< bool >::type dist(distSEXP);
    rcpp_result_gen = Rcpp::wrap(fastJacc2(m, m2, ncores, verbose, dist));
    return rcpp_result_gen;
END_RCPP
}
// fastJacc
arma::sp_mat fastJacc(const arma::sp_mat& m, int ncores, bool verbose, bool full, bool diag, bool dist);
RcppExport SEXP _sparseDist_fastJacc(SEXP mSEXP, SEXP ncoresSEXP, SEXP verboseSEXP, SEXP fullSEXP, SEXP diagSEXP, SEXP distSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type ncores(ncoresSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< bool >::type full(fullSEXP);
    Rcpp::traits::input_parameter< bool >::type diag(diagSEXP);
    Rcpp::traits::input_parameter< bool >::type dist(distSEXP);
    rcpp_result_gen = Rcpp::wrap(fastJacc(m, ncores, verbose, full, diag, dist));
    return rcpp_result_gen;
END_RCPP
}
// fastManhattan
arma::sp_mat fastManhattan(const arma::sp_mat& m, int ncores, bool verbose, bool full, bool diag);
RcppExport SEXP _sparseDist_fastManhattan(SEXP mSEXP, SEXP ncoresSEXP, SEXP verboseSEXP, SEXP fullSEXP, SEXP diagSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type ncores(ncoresSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< bool >::type full(fullSEXP);
    Rcpp::traits::input_parameter< bool >::type diag(diagSEXP);
    rcpp_result_gen = Rcpp::wrap(fastManhattan(m, ncores, verbose, full, diag));
    return rcpp_result_gen;
END_RCPP
}
// fastManhattan2
arma::sp_mat fastManhattan2(const arma::sp_mat& m, const arma::sp_mat& m2, int ncores, bool verbose, bool dist);
RcppExport SEXP _sparseDist_fastManhattan2(SEXP mSEXP, SEXP m2SEXP, SEXP ncoresSEXP, SEXP verboseSEXP, SEXP distSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type m(mSEXP);
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type m2(m2SEXP);
    Rcpp::traits::input_parameter< int >::type ncores(ncoresSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< bool >::type dist(distSEXP);
    rcpp_result_gen = Rcpp::wrap(fastManhattan2(m, m2, ncores, verbose, dist));
    return rcpp_result_gen;
END_RCPP
}
// fastEuclidean
arma::sp_mat fastEuclidean(const arma::sp_mat& m, int ncores, bool verbose, bool full, bool diag);
RcppExport SEXP _sparseDist_fastEuclidean(SEXP mSEXP, SEXP ncoresSEXP, SEXP verboseSEXP, SEXP fullSEXP, SEXP diagSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type ncores(ncoresSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< bool >::type full(fullSEXP);
    Rcpp::traits::input_parameter< bool >::type diag(diagSEXP);
    rcpp_result_gen = Rcpp::wrap(fastEuclidean(m, ncores, verbose, full, diag));
    return rcpp_result_gen;
END_RCPP
}
// fastEuclidean2
arma::sp_mat fastEuclidean2(const arma::sp_mat& m, const arma::sp_mat& m2, int ncores, bool verbose);
RcppExport SEXP _sparseDist_fastEuclidean2(SEXP mSEXP, SEXP m2SEXP, SEXP ncoresSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type m(mSEXP);
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type m2(m2SEXP);
    Rcpp::traits::input_parameter< int >::type ncores(ncoresSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(fastEuclidean2(m, m2, ncores, verbose));
    return rcpp_result_gen;
END_RCPP
}
// fastJS
arma::sp_mat fastJS(const arma::mat& m, int ncores, bool verbose, bool full, bool diag);
RcppExport SEXP _sparseDist_fastJS(SEXP mSEXP, SEXP ncoresSEXP, SEXP verboseSEXP, SEXP fullSEXP, SEXP diagSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type ncores(ncoresSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< bool >::type full(fullSEXP);
    Rcpp::traits::input_parameter< bool >::type diag(diagSEXP);
    rcpp_result_gen = Rcpp::wrap(fastJS(m, ncores, verbose, full, diag));
    return rcpp_result_gen;
END_RCPP
}
// fastJS2
arma::sp_mat fastJS2(const arma::mat& m, const arma::mat& m2, int ncores, bool verbose);
RcppExport SEXP _sparseDist_fastJS2(SEXP mSEXP, SEXP m2SEXP, SEXP ncoresSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type m(mSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type m2(m2SEXP);
    Rcpp::traits::input_parameter< int >::type ncores(ncoresSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(fastJS2(m, m2, ncores, verbose));
    return rcpp_result_gen;
END_RCPP
}

RcppExport SEXP detectCoresCpp(void);

static const R_CallMethodDef CallEntries[] = {
    {"_sparseDist_fastCorr", (DL_FUNC) &_sparseDist_fastCorr, 6},
    {"_sparseDist_fastCorr2", (DL_FUNC) &_sparseDist_fastCorr2, 5},
    {"_sparseDist_fastCov", (DL_FUNC) &_sparseDist_fastCov, 6},
    {"_sparseDist_fastCov2", (DL_FUNC) &_sparseDist_fastCov2, 4},
    {"_sparseDist_fastJacc2", (DL_FUNC) &_sparseDist_fastJacc2, 5},
    {"_sparseDist_fastJacc", (DL_FUNC) &_sparseDist_fastJacc, 6},
    {"_sparseDist_fastManhattan", (DL_FUNC) &_sparseDist_fastManhattan, 5},
    {"_sparseDist_fastManhattan2", (DL_FUNC) &_sparseDist_fastManhattan2, 5},
    {"_sparseDist_fastEuclidean", (DL_FUNC) &_sparseDist_fastEuclidean, 5},
    {"_sparseDist_fastEuclidean2", (DL_FUNC) &_sparseDist_fastEuclidean2, 4},
    {"_sparseDist_fastJS", (DL_FUNC) &_sparseDist_fastJS, 5},
    {"_sparseDist_fastJS2", (DL_FUNC) &_sparseDist_fastJS2, 4},
    {"detectCoresCpp", (DL_FUNC) &detectCoresCpp, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_sparseDist(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
